package preprocessing;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringEscapeUtils;

import containers.Document;
import containers.Query;

public class DocumentPrepper {
	
	public Document prepare(Document rawDoc) {
		clean(rawDoc);
		caseFold(rawDoc);
		
		return rawDoc;
	}
	
	public void clean(Document rawDoc) {
		rawDoc.update(rawDoc.text().replaceAll("&hyph;", "-"));
		rawDoc.update(rawDoc.text().replaceAll("&blank;", " "));
		rawDoc.update(rawDoc.text().replaceAll("&cir;", ""));

		Pattern HTML4_Pattern = Pattern.compile("&[a-z]+;");
		Matcher HTML4_Matcher = HTML4_Pattern.matcher(rawDoc.text());
		
		while (HTML4_Matcher.find()) {
			rawDoc.update(HTML4_Matcher.replaceAll(" " + HTML4_Matcher.group(0) + " "));
		}
		
		rawDoc.update(StringEscapeUtils.unescapeHtml4(rawDoc.text()));
		rawDoc.update(rawDoc.text().replaceAll("ยง", ""));
	}
	
	public void caseFold(Document rawDoc) {
		rawDoc.update(rawDoc.text().toLowerCase());
	}
	
	// includes everything except dates, which are better saved for post-normalization
	
	public void extractSpecialTokens(Document rawDoc) {
		extractEmails(rawDoc);
		extractURLs(rawDoc);
		extractFilenames(rawDoc);
		extractMonetaries(rawDoc);
		extractIPs(rawDoc);
	}
	
	public void extractURLs(Document rawDoc) {
	String URLregex = "(http:\\/\\/|https:\\/\\/)?(www\\.)?([a-zA-Z0-9]+\\.)?[a-zA-Z0-9]+\\.[a-z]{2,4}";
				
		Pattern URL_Pattern = Pattern.compile(URLregex);
		Matcher URL_Matcher = URL_Pattern.matcher(rawDoc.text());
		
		while (URL_Matcher.find()) {
			rawDoc.saveToken(URL_Matcher.group(0));					
			rawDoc.update(rawDoc.text().replaceFirst(URL_Matcher.group(0), ""));
		}	
	}
	
	/*
	 * Follow this article for email forms:
	 *  http://stackoverflow.com/questions/2049502/what-characters-are-allowed-in-email-address
	 */
	
	public void extractEmails(Document rawDoc) {
		Pattern emailPattern = Pattern.compile(".+@.+\\.[a-z]+");
		Matcher emailMatcher = emailPattern.matcher(rawDoc.text());
		
		while (emailMatcher.find()) {
			rawDoc.saveToken(emailMatcher.group(0));					
			rawDoc.update(rawDoc.text().replaceFirst(emailMatcher.group(0), ""));
		}
	}
	
	public void extractFilenames(Document rawDoc) {
		/*
		 * REGEX: ([a-zA-Z]+)(\\.)([a-zA-Z]+)
		 * 
		 * DESIGN: make sure you test that groups 1 and 3 have a length greater than one.
		 * If a file is named something like a.p, then it will simply be mistaken as an
		 * acronym. While you lose some information, that's the fault of the fool who
		 * named a file such a stupid name.
		 */
			
		/*
		 * BUG: more complex filename regex is not matching due to improper closing of groups () ?
		 */
			
//		Pattern filePattern = Pattern.compile("([a-zA-Z0-9`~!@#$^&()-_=+\\[\\]{},;']+)(\\.)([a-z]+)");
		Pattern filePattern = Pattern.compile("([a-z0-9]{2,})(\\.)([a-z]{2,})");
		Matcher fileMatcher = filePattern.matcher(rawDoc.text());
		
		while (fileMatcher.find()) {
			if (fileMatcher.group(1).length() > 1 && fileMatcher.group(3).length() > 1) {
				rawDoc.saveToken(fileMatcher.group(0));
				rawDoc.update(rawDoc.text().replaceFirst(fileMatcher.group(0), ""));
			}
		}
	}
	
	public void extractMonetaries(Document rawDoc) {
		Pattern monetaryPattern = Pattern.compile("\\$([0-9]{1,3},?)+(\\.[0-9]{2})?");
		Matcher monetaryMatcher = monetaryPattern.matcher(rawDoc.text());
		
		while (monetaryMatcher.find()) {
			String value = monetaryMatcher.group(0);
			
			if (monetaryMatcher.group(2) != null) {
				value = value.replace(monetaryMatcher.group(2), "");
			}
			
			value = value.replaceAll(",", "");
			
			if (rawDoc.tokens().get(value) == null) {
				rawDoc.saveToken(value);
				rawDoc.update(rawDoc.text().replaceFirst("\\" + monetaryMatcher.group(0), ""));
			}
		}
	}
	
	public void extractIPs(Document rawDoc) {
		Pattern IP_Pattern = Pattern.compile("[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}");
		Matcher IP_Matcher = IP_Pattern.matcher(rawDoc.text());
		
		while (IP_Matcher.find()) {
			rawDoc.saveToken(IP_Matcher.group(0));
			rawDoc.update(rawDoc.text().replaceFirst(IP_Matcher.group(0), ""));
		}
	}
}
