package main;

import static_ranking.StaticRanker;
import tools.Combination;

import java.util.LinkedList;

import dynamic_ranking.DynamicRanker;
import exceptions.CommandLineArgumentException;
import exceptions.RetrievalModelConfigException;

public class Main {

	public static void main(String[] args) throws CommandLineArgumentException {
//		String[] test = new String[3];
//		test[0] = "foo";
//		test[1] = "bar";
//		test[2] = "fuck";
//		
//		Combination combo = new Combination();
//		
//		LinkedList<String> combos = combo.printCombination(test, 3, 2);
		
		int argvLength = 6;
		if (argvLength == 6) {
			String indexConfig = "STEM";
			String sim_Measure = "lm";
			
			try {
				long t0 = System.nanoTime();
				System.out.println("Statically ranking...");
				
				new StaticRanker(indexConfig, sim_Measure).rank();
				
				long t1 = System.nanoTime();
				System.out.println("Done statically ranking!");
				
				long delta_t0 = (long) ((t1 - t0) * Math.pow(10, -6));
				System.out.println("Time taken to process queries: " + String.valueOf(delta_t0) + " milliseconds");
			} catch (RetrievalModelConfigException e) {
				e.printStackTrace();
			}
		}
		else if (argvLength == 4) {
			long t0 = System.nanoTime();
			System.out.println("Dynamically ranking...");
			
			new DynamicRanker().rank();
			
			long t1 = System.nanoTime();
			System.out.println("Done dynamically ranking!");
			
			long delta_t0 = (long) ((t1 - t0) * Math.pow(10, -6));
			System.out.println("Time taken to process queries: " + String.valueOf(delta_t0) + " milliseconds");
		}
		else {
			throw new CommandLineArgumentException("Invalid number of command line arguments: " + (argvLength - 1));
		}
	}
}
