package preprocessing;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringEscapeUtils;

import containers.Query;

public class DocumentPrepper {
	
	public String prepare(String rawDoc) {
		rawDoc = clean(rawDoc);
		rawDoc = caseFold(rawDoc);
		
		return rawDoc;
	}
	
	public String clean(String rawDoc) {
		rawDoc = rawDoc.replaceAll("&hyph;", "-");
		rawDoc = rawDoc.replaceAll("&blank;", " ");
		rawDoc = rawDoc.replaceAll("&cir;", "");

		Pattern HTML4_Pattern = Pattern.compile("&[a-z]+;");
		Matcher HTML4_Matcher = HTML4_Pattern.matcher(rawDoc);
		
		while (HTML4_Matcher.find()) {
			rawDoc = HTML4_Matcher.replaceAll(" " + HTML4_Matcher.group(0) + " ");
		}
		
		rawDoc = StringEscapeUtils.unescapeHtml4(rawDoc);
		rawDoc = rawDoc.replaceAll("ยง", "");
		
		return rawDoc;
	}
	
	public String caseFold(String rawDoc) {
		return rawDoc.toLowerCase();
	}
	
	// includes everything except dates, which are better saved for post-normalization
	
//	public String extractSpecialTokens(String rawDoc) {
//		extractEmails(rawDoc);
//		extractURLs(rawDoc);
//		extractFilenames(rawDoc);
//		extractMonetaries(rawDoc);
//		extractIPs(rawDoc);
//	}
//	
//	public String extractURLs(String rawDoc) {
//	String URLregex = "(http:\\/\\/|https:\\/\\/)?(www\\.)?([a-zA-Z0-9]+\\.)?[a-zA-Z0-9]+\\.[a-z]{2,4}";
//				
//		Pattern URL_Pattern = Pattern.compile(URLregex);
//		Matcher URL_Matcher = URL_Pattern.matcher(rawDoc.string());
//		
//		while (URL_Matcher.find()) {
//			if (rawDoc.tokens().get(URL_Matcher.group(0)) == null) {
//				rawDoc.saveToken(URL_Matcher.group(0));					
//			} else {
//				rawDoc.incrementTokenFreq(URL_Matcher.group(0));
//			}
//			rawDoc.updateString(rawDoc.string().replaceFirst(URL_Matcher.group(0), ""));
//		}	
//	}
//	
//	/*
//	 * Follow this article for email forms:
//	 *  http://stackoverflow.com/questions/2049502/what-characters-are-allowed-in-email-address
//	 */
//	
//	public String extractEmails(String rawDoc) {
//		Pattern emailPattern = Pattern.compile(".+@.+\\.[a-z]+");
//		Matcher emailMatcher = emailPattern.matcher(rawDoc.string());
//		
//		while (emailMatcher.find()) {
//			if (rawDoc.tokens().get(emailMatcher.group(0)) == null) {
//				rawDoc.saveToken(emailMatcher.group(0));					
//			} else {
//				rawDoc.incrementTokenFreq(emailMatcher.group(0));
//			}
//
//			rawDoc.updateString(rawDoc.string().replaceFirst(emailMatcher.group(0), ""));
//		}
//	}
//	
//	public String extractFilenames(String rawDoc) {
//		/*
//		 * REGEX: ([a-zA-Z]+)(\\.)([a-zA-Z]+)
//		 * 
//		 * DESIGN: make sure you test that groups 1 and 3 have a length greater than one.
//		 * If a file is named something like a.p, then it will simply be mistaken as an
//		 * acronym. While you lose some information, that's the fault of the fool who
//		 * named a file such a stupid name.
//		 */
//			
//		/*
//		 * BUG: more complex filename regex is not matching due to improper closing of groups () ?
//		 */
//			
////		Pattern filePattern = Pattern.compile("([a-zA-Z0-9`~!@#$^&()-_=+\\[\\]{},;']+)(\\.)([a-z]+)");
//		Pattern filePattern = Pattern.compile("([a-z0-9]{2,})(\\.)([a-z]{2,})");
//		Matcher fileMatcher = filePattern.matcher(rawDoc.string());
//		
//		while (fileMatcher.find()) {
//			if (fileMatcher.group(1).length() > 1 && fileMatcher.group(3).length() > 1) {
//				
//				if (rawDoc.tokens().get(fileMatcher.group(0)) == null) {
//					rawDoc.saveToken(fileMatcher.group(0));
//				} else {
//					rawDoc.incrementTokenFreq(fileMatcher.group(0));
//				}
//				rawDoc.updateString(rawDoc.string().replaceFirst(fileMatcher.group(0), ""));
//			}
//		}
//	}
//	
//	public String extractMonetaries(String rawDoc) {
//		Pattern monetaryPattern = Pattern.compile("\\$([0-9]{1,3},?)+(\\.[0-9]{2})?");
//		Matcher monetaryMatcher = monetaryPattern.matcher(rawDoc.string());
//		
//		while (monetaryMatcher.find()) {
//			String value = monetaryMatcher.group(0);
//			
//			if (monetaryMatcher.group(2) != null) {
//				value = value.replace(monetaryMatcher.group(2), "");
//			}
//			
//			value = value.replaceAll(",", "");
//			
//			if (rawDoc.tokens().get(value) == null) {
//				rawDoc.saveToken(value);
//			} else {
//				rawDoc.incrementTokenFreq(value);
//			}
//			rawDoc.updateString(rawDoc.string().replaceFirst("\\" + monetaryMatcher.group(0), ""));
//		}
//	}
//	
//	public String extractIPs(String rawDoc) {
//		Pattern IP_Pattern = Pattern.compile("[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}");
//		Matcher IP_Matcher = IP_Pattern.matcher(rawDoc.string());
//		
//		while (IP_Matcher.find()) {
//			if (rawDoc.tokens().get(IP_Matcher.group(0)) == null) {
//				rawDoc.saveToken(IP_Matcher.group(0));
//			} else {
//				rawDoc.incrementTokenFreq(IP_Matcher.group(0));
//			}
//			rawDoc.updateString(rawDoc.string().replaceFirst(IP_Matcher.group(0), ""));
//		}
//	}
}
