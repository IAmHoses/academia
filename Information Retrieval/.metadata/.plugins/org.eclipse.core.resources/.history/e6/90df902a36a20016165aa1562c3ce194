package tools;

import java.util.LinkedList;

public class Combination {
	static LinkedList<String> combos = new LinkedList<String>();
	
    /* arr[]  ---> Input Array
    data[] ---> Temporary array to store current combination
    start & end ---> Staring and Ending indexes in arr[]
    index  ---> Current index in data[]
    r ---> Size of a combination to be printed */
    static LinkedList<String> combinationUtil(String arr[], String data[], int start,
                                int end, int index, int r, LinkedList<String> _combos)
    {
        // Current combination is ready to be printed, print it
    	

        if (index == r) {
        	String combination = null;
        	
            for (int j=0; j<r; j++) {
            	combination += " ";
//            	System.out.print(data[j]+" ");
            }
            _combos.add(combination);
//            System.out.println("");
        }
 
        // replace index with all possible elements. The condition
        // "end-i+1 >= r-index" makes sure that including one element
        // at index will make a combination with remaining elements
        // at remaining positions
        for (int i=start; i<=end && end-i+1 >= r-index; i++)
        {
            data[index] = arr[i];
            combinationUtil(arr, data, i+1, end, index+1, r, combos);
        }
		return combos;
    }
 
    // The main function that prints all combinations of size r
    // in arr[] of size n. This function mainly uses combinationUtil()
    public void printCombination(String arr[], int n, int r)
    {
        // A temporary array to store all combination one by one
        String data[]=new String[r];
 
        // Print all combination using temprary array 'data[]'
        combos = combinationUtil(arr, data, 0, n-1, 0, r, combos);
        return combos;
    }
}
