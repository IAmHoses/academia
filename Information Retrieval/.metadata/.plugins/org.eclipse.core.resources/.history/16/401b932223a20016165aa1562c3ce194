package dynamic_ranking;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import containers.PositionalPostingList;
import containers.PostingList;
import containers.Query;
import exceptions.IndexConfigException;
import exceptions.RetrievalModelConfigException;
import preprocessing.Preprocessor;
import static_ranking.StaticLanguageModel;
import static_ranking.StaticProbabilisticModel;
import static_ranking.StaticRanker;
import static_ranking.StaticVectorSpaceModel;
import tools.Loader;

public class DynamicRanker {
	private HashMap<String, PostingList> singleTermIndex;
	private HashMap<String, PostingList> stemIndex;
	private HashMap<String, PostingList> phraseIndex;
	private HashMap<String, PositionalPostingList> positionalIndex;
	
	private HashMap<String, Query> singleTermQueries;
	private HashMap<String, Query> stemQueries;
	private HashMap<String, Query> phraseQueries;
	private HashMap<String, Query> positionalQueries;
	
	private Set<String> singleTermDocuments;
	private Set<String> stemDocuments;
	private Set<String> phraseDocuments;
	private Set<String> positionalDocuments;
	
	// parameters: index configuration and pre=processed queries
	public DynamicRanker() {
		try {
			Loader loader = new Loader();
			singleTermIndex = loader.loadStandardIndex("SINGLE_TERM");
			stemIndex = loader.loadStandardIndex("STEM");
			phraseIndex = loader.loadStandardIndex("PHRASE");
			positionalIndex = loader.loadPositionalIndex("PROXIMITY");
		} catch (IndexConfigException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		singleTermQueries = new Preprocessor("SINGLE_TERM").preprocess();
		stemQueries = new Preprocessor("STEM").preprocess();
		phraseQueries = new Preprocessor("PHRASE").preprocess();
		positionalQueries = new Preprocessor("PROXIMITY").preprocess();
		
//		for (String query : phraseQueries.keySet()) {
//			for (String token : phraseQueries.get(query).tokens().keySet()) {
//				System.out.println(token);
//			}
//		}
		
		singleTermDocuments = gatherDocuments("SINGLE_TERM");
		stemDocuments = gatherDocuments("STEM");
		phraseDocuments = gatherDocuments("PHRASE");
		positionalDocuments = gatherDocuments("PROXIMITY");
		
//		System.out.println(singleTermDocuments.size());
//		System.out.println(stemDocuments.size());
//		System.out.println(phraseDocuments.size());
//		System.out.println(positionalDocuments.size());
	}
	
	public Set<String> gatherDocuments(String indexConfig) {
		Set<String> docNumbers = new HashSet<String>();
		
		HashMap<String, PostingList> standardIndex = null;
		HashMap<String, PositionalPostingList> positionalIndex = null;
		
		if (indexConfig == "SINGLE_TERM") {
			standardIndex = singleTermIndex;
		}
		if (indexConfig == "STEM") {
			standardIndex = stemIndex;
		}
		if (indexConfig == "PHRASE") {
			standardIndex = phraseIndex;
		}
		if (indexConfig == "PROXIMITY") {
			positionalIndex = this.positionalIndex;
		}
		
		if (indexConfig == "PROXIMITY") {
			for (String term : positionalIndex.keySet()) {
				PositionalPostingList postingList = positionalIndex.get(term);
				
				for (String DocNo : postingList.map().keySet()) {
					if (docNumbers.contains(DocNo)) {
						continue;
					} else {
						docNumbers.add(DocNo);
					}
				}
			}
		} else {
			for (String term : standardIndex.keySet()) {
				PostingList postingList = standardIndex.get(term);
				
				for (String DocNo : postingList.map().keySet()) {
					if (docNumbers.contains(DocNo)) {
						continue;
					} else {
						docNumbers.add(DocNo);
					}
				}
			}
		}
		return docNumbers;
	}
	
	public void rank() {
		try {
			new StaticRanker("SINGLE_TERM", "COSINE").rank();
		} catch (RetrievalModelConfigException e) {
			e.printStackTrace();
		}
	}
	
	public String determineIndexConfig(String queryNum, int df_threshold) {
		int df_sum = 0;
		
		Query query = phraseQueries.get(queryNum);
		
		for (String token : query.tokens().keySet()) {
			if (phraseIndex.containsKey(token)) {
				df_sum += phraseIndex.get(token).map().size();
			}
		}
		
		if (df_sum >= df_threshold) {
			return "PHRASE";
		} else {
			return "PROXIMITY";
		}
	}
	
//	public void generateCosineMeasureOutput() {
//		String output = "";
//		
//		for (String queryNum : queries.keySet()) {
//			Query query = queries.get(queryNum);
//			
//			Score[] scores = new Score[N];
//			int i = 0;
//			
//			for (String docNo : documents) {
//				double dotProduct = 0;
//				
//				for (String token : query.tokens().keySet()) {
//					if (!index.containsKey(token)) {
//						continue;
//					}
//					
//					PostingList postingList = index.get(token);	// grab posting list for current token
//					
//					if (postingList.map().containsKey(docNo)) {	// posting list for token has a mapping for the document in question
//						double w = postingList.map().get(docNo).tf() * postingList.idf();
//						double d = postingList.map().get(docNo).tf();
//						
//						dotProduct += w * d;
//					}
//				}	
//				double score = dotProduct / (Math.sqrt(d_squares.get(docNo) * w_squares.get(queryNum)));
//				
//				if (String.valueOf(score)!= "NaN" && score != 0) {
//					scores[i] = new Score(score, query.number(), docNo);
//					i++;
//				}
//			}
//		    List<Score> list = new ArrayList<Score>(Arrays.asList(scores));
//		    list.removeAll(Collections.singleton(null));
//		    scores = list.toArray(new Score[list.size()]);
//			
//			Arrays.sort(scores, new ScoreComparator());
//			
//			int indexUpperLimit;
//			
//			if (scores.length > 100) {
//				indexUpperLimit = 100;
//			} else {
//				indexUpperLimit = scores.length;
//			}
//			
//			for (int j = 0; j < indexUpperLimit; j++) {
//				output += scores[j].queryNumber() + " 0 " + scores[j].documentNumber() + " " + (j+1) + " " + scores[j].score() + " COSINE\n";
//			}
//		}
//		
//		// NOW WRITE THAT SHIT :D
//		
//		Path path = Paths.get("Results/cosine.txt");
//		try {
//			BufferedWriter bw = Files.newBufferedWriter(path, StandardOpenOption.CREATE);
//			bw.write(output);
//			bw.close();
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//	}
}
