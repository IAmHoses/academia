package scheduling;

import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Comparator;

public class ShortestJobFirst {
	LinkedList<Process> processes;
	PriorityQueue<Process> processHeap;
	Integer totalTime;
	Integer averageBurstTime;
	
	public ShortestJobFirst (LinkedList<Process> processes) {
		this.processes = processes;
		processHeap = new PriorityQueue<Process>(new ShortestJobFirstComparator());
		totalTime = 0;
		averageBurstTime = 0;
	}
	
	
	public void schedule () {
		while (!processHeap.isEmpty()) {
			
		}
	}
	
	private void startArrivingProcesses () {
		for (Process process : processes) {
			if (totalTime >= process.getStartTime()) {
				process.start();
				
				if (process.getSubprocesses().getFirst().getType().equals("I")) {
					process.sleep();
				}
			}
		}
	}
	
	class ShortestJobFirstComparator implements Comparator<Process> {
		@Override
		public int compare(Process p1, Process p2) {
			Subprocess p1Head = p1.getSubprocesses().getFirst();
			Subprocess p2Head = p2.getSubprocesses().getFirst();
			
			if (p1Head.getType().equals("B") && p2Head.getType().equals("B") ||
					(p1Head.getType().equals("I") && p2Head.getType().equals("I"))) {
				
				if (p1Head.getTime() < p2Head.getTime()) {
					return -1;
				}
				else if (p1Head.getTime() > p2Head.getTime()) {
					return 1;
				}
				else {
					return 0;	
				}
			}
			
			if (p1Head.getType().equals("B") && p2Head.getType().equals("I")) {
				return -1;
			}
			
			if (p1Head.getType().equals("I") && p2Head.getType().equals("B")) {
				return 1;
			}
			
			return 0;
		}
	}
}
